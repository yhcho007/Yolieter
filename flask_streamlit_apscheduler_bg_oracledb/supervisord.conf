[supervisord]
nodaemon=true # Docker 컨테이너의 Entrypoint로 실행되려면 포그라운드로 실행되어야 해!

[program:nginx]
# Nginx를 포그라운드로 실행하는 명령어야.
command=/usr/sbin/nginx -g "daemon off;"
stdout_logfile=/dev/stdout # 로그를 컨테이너 표준 출력으로 보내서 docker logs로 볼 수 있게 해.
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr # 에러 로그도 표준 에러로 보내자.
stderr_logfile_maxbytes=0
autostart=true     # Supervisord 시작 시 자동으로 시작할까? 당연히 해야지!
autorestart=true   # 종료되면 자동으로 다시 시작할까? 그래야 안정적이지!

[program:gunicorn]
# Gunicorn으로 Flask 앱(main.py 파일의 'app' 객체)을 실행하는 명령어야.
# -w 4 는 워커 프로세스 수인데, 필요에 따라 조절해.
# -b 0.0.0.0:5000 은 컨테이너 안의 모든 IP에 대해 5000번 포트로 들어오는 요청을 받겠다는 뜻이야. Nginx가 이리로 보낼 거야!
command=gunicorn -w 4 -b 0.0.0.0:5000 main:app
directory=/app # 이 명령어를 실행할 디렉토리를 설정해줘.
user=root # 어떤 사용자로 실행할지. Openshift에서는 임의의 User ID로 실행될 거라 권한 설정이 중요해.
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0

[program:dashapp]
# Dash 앱을 실행하는 명령어야. dash_app.py 파일이 8501번 포트로 실행된다고 가정했어.
command=python dash_app.py
directory=/app
user=root
autostart=true
autorestart=true
redirect_stderr=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
# 만약 Dash 앱이 Gunicorn이나 DB 연결 후에 시작되어야 한다면, supervisord 설정에서 dependency를 설정하거나
# start.sh 같은 스크립트에서 시작 순서를 제어해야 할 수도 있어. 여기서는 간단히 동시에 시작하도록 했어.

[program:schscript]
# sch.py 백그라운드 스크립트를 실행하는 명령어야.
# 만약 이 스크립트가 Flask 앱 내부에서 APScheduler 등으로 관리된다면 이 부분은 필요 없을 수도 있어!
# 여기서는 독립적인 프로세스로 계속 실행되어야 한다고 가정하고 추가했어.
command=python sch.py
directory=/app
user=root
autostart=true
autorestart=true # 스크립트가 죽으면 자동으로 다시 시작하도록 해.
redirect_stderr=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
